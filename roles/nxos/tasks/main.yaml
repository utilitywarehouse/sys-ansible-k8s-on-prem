# Kubernetes Vlan
- name: Ensure VLAN is {{ kube_vlan_id }} exists the device
  nxos_vlan:
    vlan_id: "{{ kube_vlan_id }}"
    name: "{{ kube_vlan_name }}"
    state: present

- name: Ensure VLAN is {{ kube_vlan_id }} is up and active
  nxos_vlan:
    vlan_id: "{{ kube_vlan_id }}"
    name: "{{ kube_vlan_name }}"
    admin_state: up
    vlan_state: active

- name: Ensure ports are configured for access vlan "{{ kube_vlan_id }}"
  nxos_l2_interface:
    interface: "{{ item }}"
    mode: access
    access_vlan: "{{ kube_vlan_id }}"
  loop: "{{ iport_list }}"

- name: Create interface SVI {{ kube_vlan_id }}
  nxos_interface:
    name: "vlan{{ kube_vlan_id }}"
    admin_state: up
    state: present

- name: Ensure vlan {{kube_vlan_id}} exist on vrf internal
  nxos_vrf_interface:
    vrf: internal
    interface: "vlan{{ kube_vlan_id }}"
    state: present

- name: Set interface IPv4 address for SVI "{{ kube_vlan_id }}"
  nxos_l3_interface:
    name: "vlan{{ kube_vlan_id }}"
    ipv4: "{{ kube_vlan_ip_address}}/{{ kube_vlan_ip_netmask }}"
    state: present

- name: Create an acl for the kubernetes private network
  nxos_acl:
    name: pbr-gw-private
    seq: 10
    action: permit
    proto: ip
    src: "{{ kube_vlan_ip_address }}/{{ kube_vlan_ip_netmask }}"
    dest: any
    state: present

- name: Create route map for outgoing traffic initiated from kubernetes nodes
  nxos_config:
    lines:
      - match ip address pbr-gw-private
      - set ip next-hop {{ ebgp_peer_172_ip }}
    parents:
      - interface vlan{{kube_vlan_id}}
      - route-map pbr-gw-pivate permit 10
  when: not ansible_check_mode

- name: Enable proxy arp needed by calico to route packets between pods on different nodes and add acl
  nxos_config:
    lines:
      - ip proxy-arp
      - ip local-proxy-arp
      - ip policy route-map pbr-gw-pivate
    parents: interface vlan{{kube_vlan_id}}
  when: not ansible_check_mode

 # Private bgp connection vlan
- name: Ensure VLAN is {{ vlan_172_id }} exists on the device
  nxos_vlan:
    vlan_id: "{{ vlan_172_id }}"
    name: "{{ vlan_172_name }}"
    state: present

- name: Ensure VLAN is {{ vlan_172_id }} is up and active
  nxos_vlan:
    vlan_id: "{{ vlan_172_id }}"
    name: "{{ vlan_172_name }}"
    admin_state: up
    vlan_state: active

- name: Create interface SVI {{ vlan_172_id }}
  nxos_interface:
    name: "vlan{{ vlan_172_id }}"
    admin_state: up
    state: present

- name: Ensure vlan {{vlan_172_id}} exist on vrf internal
  nxos_vrf_interface:
    vrf: internal
    interface: "vlan{{ vlan_172_id }}"
    state: present

- name: Set interface IPv4 address for svi "{{ vlan_172_id }}"
  nxos_l3_interface:
    name: "vlan{{ vlan_172_id }}"
    ipv4: "{{ vlan_172_ip_address}}/{{ vlan_172_ip_netmask }}"
    state: present

# Public bgp connection vlan
- name: Ensure VLAN is {{ vlan_192_id }} exists on the device
  nxos_vlan:
    vlan_id: "{{ vlan_192_id }}"
    name: "{{ vlan_192_name }}"
    state: present

- name: Ensure VLAN is {{ vlan_192_id }} is up and active
  nxos_vlan:
    vlan_id: "{{ vlan_192_id }}"
    name: "{{ vlan_192_name }}"
    admin_state: up
    vlan_state: active

- name: Create interface SVI {{ vlan_192_id }}
  nxos_interface:
    name: "vlan{{ vlan_192_id }}"
    admin_state: up
    state: present

- name: Ensure vlan {{vlan_192_id}} exist on vrf internal
  nxos_vrf_interface:
    vrf: internal
    interface: "vlan{{ vlan_192_id }}"
    state: present

- name: Set interface IPv4 address for svi "{{ vlan_192_id }}"
  nxos_l3_interface:
    name: "vlan{{ vlan_192_id }}"
    ipv4: "{{ vlan_192_ip_address}}/{{ vlan_192_ip_netmask }}"
    state: present

# Since private and public bgp sessions will go via the same physical interface we need to allow
# both vlans on trunk mode
- name: Ensure vlan {{ vlan_192_id }} is being allowed on the trunk for {{ vlan_shared_trunk_iface }}
  nxos_l2_interface:
    name: "{{ vlan_shared_trunk_iface }}"
    mode: trunk
    trunk_allowed_vlans: "{{ vlan_172_id }},{{ vlan_192_id }}"

# Set our null route for the whole public range to be advertised as routes smaller than /24
# will be dropped by external providers
- name: Set null0 public route
  nxos_static_route:
    prefix: "85.91.50.0/24"
    next_hop: "Null0"
    vrf: internal

# Remove default route to other sws if any
- name: Make sure no default route goes via public gateway
  nxos_static_route:
    prefix: "0.0.0.0/0"
    next_hop: "{{ ebgp_peer_192_ip }}"
    route_name: default
    vrf: internal
    state: absent

- name: Make sure no default route goes via private gateway
  nxos_static_route:
    prefix: "0.0.0.0/0"
    next_hop: "{{ ebgp_peer_172_ip }}"
    route_name: default
    vrf: internal
    state: absent

# BGP
- name: Ensure BGP router
  nxos_bgp:
      asn: "{{ bgp_asn }}"
      router_id: "{{ router_id }}"
      vrf: internal
      state: present

# configure a simple address-family
- name: Configure BGP address family
  nxos_bgp_af:
    asn: "{{ bgp_asn }}"
    vrf: internal
    afi: ipv4
    safi: unicast
    # For some crazy reason that gets deleted when it is present and added when it is not (every other run or check)
    # Maybe related with https://github.com/ansible/ansible/issues/42136
    networks: "{{ networks }}"
    maximum_paths_ibgp: 10
    distance_ebgp: 230
    distance_ibgp: 20
    distance_local: 220
    additional_paths_send: yes
    additional_paths_receive: yes
    state: present

# k8s bgp neighbors
- name: configure kube ibgp clients
  nxos_bgp_neighbor:
    asn: "{{ bgp_asn }}"
    vrf: internal
    neighbor: "{{ item }}"
    remote_as: "{{ bgp_asn }}"
    state: present
  loop: "{{ kube_ibgp_neighbors }}"

- name: configure kube ibgp clients afi-safis
  nxos_bgp_neighbor_af:
    asn: "{{ bgp_asn }}"
    vrf: internal
    neighbor: "{{ item }}"
    afi: ipv4
    safi: unicast
    additional_paths_send: enable
    additional_paths_receive: enable
    state: present
  loop: "{{ kube_ibgp_neighbors }}"

# Set up prefix list to export
- name: set additional config items
  nxos_config:
    lines: "{{ additional_config }}"
  when: not ansible_check_mode

# eBGP peer to advertise internal network
- name: configure eBGP peer to advertise on-prem network
  nxos_bgp_neighbor:
    asn: "{{ bgp_asn }}"
    vrf: internal
    neighbor: "{{ ebgp_peer_172_ip }}"
    remote_as: "{{ ebgp_peer_172_remote_as }}"
    pwd: "{{ ebgp_peer_172_password }}"
    pwd_type: 3des
    state: present
  diff: no

- name: configure eBGP peer's afi-safi for private network
  nxos_bgp_neighbor_af:
    asn: "{{ bgp_asn }}"
    vrf: internal
    neighbor: "{{ ebgp_peer_172_ip }}"
    afi: ipv4
    safi: unicast
    prefix_list_out: "{{ internal_prefix_list_out }}"
    state: present

# eBGP peer to advertise public network
- name: configure eBGP peer to advertise public network
  nxos_bgp_neighbor:
    asn: "{{ bgp_asn }}"
    vrf: internal
    neighbor: "{{ ebgp_peer_192_ip }}"
    remote_as: "{{ ebgp_peer_192_remote_as }}"
    pwd: "{{ ebgp_peer_192_password }}"
    pwd_type: 3des
    state: present
  diff: no

- name: configure eBGP peer's afi-safi for public network
  nxos_bgp_neighbor_af:
    asn: "{{ bgp_asn }}"
    vrf: internal
    neighbor: "{{ ebgp_peer_192_ip }}"
    afi: ipv4
    safi: unicast
    prefix_list_out: "{{ public_prefix_list_out }}"
    state: present
